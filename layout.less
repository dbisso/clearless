/**
 * Alignment
 */
.alignleft {
	display: inline;
	float: left;
	margin-right: 1.5em;
	clear: none;
}

.alignright {
	display: inline;
	float: right;
	margin-left: 1.5em;
	clear: none;
	right: 0;
	left: auto;
}

.aligncenter {
	display: block;
	// margin: 0 auto;
	margin-left: auto;
	margin-right: auto;
	text-align: center;
}

.pull-left {
	float: left;
}

.pull-right {
	float: right;
}

.position-head {
	position: absolute;
	top: 0;
	bottom: auto;
}

.naked {
	margin: 0;
	padding: 0;
}

/**
 * Box
 *
 * Boxes are isolated blocks with optional styling
 */
.box {
	clear: both;
	width: auto;
	padding-right: 0;
	.inner {
		padding: 0 @flesh_size @flesh_size;
	}
}

.box-flesh {
	padding-right: @flesh_size;
	.inner {
		padding: @flesh_size;
	}
}

.wrapper-box-flesh {
	margin-right: -@flesh_size;
}

.block {
	display: block;
	width: 100%;
}

/**
 * Stream
 *
 * A stream is a vertical list of items - something like a newsfeed
 */
.stream {
	> * {
		clear: both;
		display: block;
	}
}

.stream-naked {
	> * {
		margin-bottom: 0;
		clear: both;
		display: block;
	}
}

/**
 * String
 *
 * A string is a horizontal list of items - something like beads on a string
 * Some stuff from YUI grids included to avoid spaces between inline blocks.
 */
.string {
	 letter-spacing: @inline-block-adjust; // Webkit: collapse white-space between units
    *letter-spacing: normal; // reset IE < 8
    *word-spacing: -0.43em; // IE < 8: collapse white-space between units
    // text-rendering: optimizeSpeed; // Webkit: fixes text-rendering: optimizeLegibility

	> * {
		.inline-block();
		vertical-align: top;

		letter-spacing: normal;
		word-spacing: normal;
		// text-rendering: auto;
	}

	.string {
		letter-spacing: @inline-block-adjust;  //webkit
		*letter-spacing: normal;  //IE6/7 reset

		// Dummy class applies to opera and IE<8
		// Chrome Dev Tools chokes on this if it's not followed by another ruleset.
		.opera-only :-o-prefocus, .string {
			word-spacing: -0.43em;
		}

		_fake { display: inherit }
	}

	.opera-only :-o-prefocus, .string {
		word-spacing: -0.43em;
	}

	_fake { display: inherit }
}

.blocks {

	> * {
		float: left;
		clear: none;
		> * {
			line-height: 0;
			> * {
				line-height: @bl;
			}
		}
	}
}

/**
 * Stack
 *
 * A stack is a series of element stacked on top of each other in the z plane
 * - something like a stack of acetate viewed from above. The child elements are
 * positioned absolutely to the parent.
 *
 * A non-classed element acts as the background layer (e.g. an image). Other
 * elements overlay this background.
 */
.stack {
	position: relative;
	display: block;

	> * {
		z-index: 0;
	}
}

.stack-foreground {
	position: absolute;
	z-index: 2;
}

.stack-midground {
	position: absolute;
	z-index: 1;
}

.stack-top,
.stack-middle,
.stack-bottom {
	left: 0;
	right: 0;
}

.stack-top {
	top: 0;
}

.stack-middle {
	top: 45%;
}

.stack-bottom {
	bottom: 0;
}

.stack-left {
	top: 0;
	bottom: 0;
	left: 0;
	right: auto;
	width: 25%
}

.stack-right {
	top: 0;
	bottom: 0;
	right: 0;
	left: auto;
	width: 25%;
}

/**
 * Ears
 *
 * An ear stick out to the side.
 */
.ear-left() when ( isem(@ear_size) ), ( ispx(@ear_size) ), ( ispercent(@ear_size) ) {
	margin-left: 0 - @ear_size;

	.beta & {
		margin-left: 0 - @ear_size * 0.75;
	}

	.gamma & {
		margin-left: 0 - @ear_size * 0.75;
	}
}

// Assume we are dealing with rems
.ear-left {
	@rem-size: 0 - unit(@ear_size);
	@px-size: unit(@rem-size) * @base-font-size;
	margin-left: ~"@{px-size}px";
	margin-left: ~"@{rem-size}rem";

	.beta & {
		@b-rem-size: @rem-size * 0.75;
		@b-px-size: @px-size * 0.75;
		margin-left: ~"@{b-px-size}px";
		margin-left: ~"@{b-rem-size}rem";
	}

	.gamma & {
		margin-left: ~"@{px-size}px";
		margin-left: ~"@{rem-size}rem";
	}
}

.ear-left-small {
	margin-left: -1.5rem;
}


